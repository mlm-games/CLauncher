name: bi-monthly Android App Deploy

on:
  workflow_dispatch:
    inputs:
      upload_releases:
        description: 'Upload releases'
        required: true
        default: 'true'
        type: boolean
      mark_prerelease:
        description: 'Mark as prerelease'
        required: true
        default: 'false'
        type: boolean
      play_track:
        description: 'Google Play track'
        required: true
        default: 'production'
        type: choice
        options:
          - internal
          - alpha
          - beta
          - production

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'corretto'
  BUILD_GRADLE_PATH: 'app/build.gradle'  # Adjust path if necessary

jobs:
  prepare-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      old_version_name: ${{ steps.version.outputs.old_version_name }}
      version_name: ${{ steps.version.outputs.version_name }}
      base_version_code: ${{ steps.version.outputs.version_code }}
      build_date: ${{ steps.version.outputs.build_date }}
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - id: version
        run: |
          OLD_VERSION_CODE=$(grep "versionCode" $BUILD_GRADLE_PATH | head -1 | grep -oE '[0-9]+')
          OLD_VERSION_NAME=$(grep "versionName" $BUILD_GRADLE_PATH | head -1 | grep -oE '"([^"]+)"' | tr -d '"')

          NEW_VERSION_CODE=$((OLD_VERSION_CODE + 10))

          IFS='.' read -ra VERSION_PARTS <<< "$OLD_VERSION_NAME"
          MINOR=$((VERSION_PARTS[2] + 1))
          VERSION_PARTS[2]=$MINOR
          NEW_VERSION_NAME="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}"

          echo "old_version_name=$OLD_VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_name=$NEW_VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$NEW_VERSION_CODE" >> $GITHUB_OUTPUT
          echo "build_date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

          # Update build.gradle
          sed -i "s/versionCode $OLD_VERSION_CODE/versionCode $NEW_VERSION_CODE/" $BUILD_GRADLE_PATH
          sed -i "s/versionName \"$OLD_VERSION_NAME\"/versionName \"$NEW_VERSION_NAME\"/" $BUILD_GRADLE_PATH

          # Commit and push version update
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add $BUILD_GRADLE_PATH
          git commit -m "Bump version to $NEW_VERSION_NAME (code: $NEW_VERSION_CODE) [skip ci]" || echo "No changes to commit"
          git push

  build-and-release:
    needs: prepare-version
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v5
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE }}" > release.keystore.asc
          gpg -d --passphrase "${{ secrets.KEYSTORE_PASSPHRASE }}" --batch release.keystore.asc > release.keystore

     
      - name: Build AAB (Play)
        env:
          KEYSTORE_PATH: ${{ github.workspace }}/release.keystore
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: ./gradlew :app:bundleRelease -PenableApkSplits=false

      - name: Upload AAB to Google Play
        if: github.event_name == 'workflow_dispatch' && inputs.upload_releases == true
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: app.clauncher
          releaseFiles: app/build/outputs/bundle/release/app-release.aab
          track: ${{ inputs.play_track }}
          status: completed
          whatsNewDirectory: fastlane/metadata/android
          mappingFile: app/build/outputs/mapping/release/mapping.txt
          
      - name: Clean before APK build
        run: ./gradlew clean

      - name: Build APK splits
        env:
          KEYSTORE_PATH: ${{ github.workspace }}/release.keystore
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: ./gradlew :app:assembleRelease -PenableApkSplits=true -PincludeUniversalApk=true

      - name: Prepare APKs
        run: |
          mkdir -p artifacts
          for apk in app/build/outputs/apk/release/*.apk; do
            if [ -f "$apk" ]; then
              arch=$(echo "$apk" | grep -oE '(arm64-v8a|armeabi-v7a|x86_64|x86|universal)')
              if [ -n "$arch" ]; then
                cp "$apk" "artifacts/clauncher-${{ needs.prepare-version.outputs.version_name }}-${arch}.apk"
              fi
            fi
          done

      - name: Upload Artifacts (if not releasing)
        uses: actions/upload-artifact@v4
        if: github.event_name != 'workflow_dispatch' || inputs.upload_releases == false
        with:
          name: release-${{ needs.prepare-version.outputs.version_name }}
          path: artifacts/*

      - name: Create GitHub Release
        if: github.event_name == 'workflow_dispatch' && inputs.upload_releases == true
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*
          name: "CLauncher ${{ needs.prepare-version.outputs.version_name }}"
          tag_name: "${{ needs.prepare-version.outputs.version_name }}"
          prerelease: ${{ inputs.mark_prerelease }}
          fail_on_unmatched_files: false
          body: |
            ## CLauncher Release ${{ needs.prepare-version.outputs.version_name }}

            Build Date: ${{ needs.prepare-version.outputs.build_date }}
            Base Version Code: ${{ needs.prepare-version.outputs.base_version_code }}
